# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.threads.mutex
+alias org.eolang.threads.thread
+architect 28lev11@gmail.com
+home https://github.com/objectionary/eo-threads
+junit
+package org.eolang.threads
+version 0.0.0

[] > acquire-release
  mutex 100 > m
  seq > @
    m.acquire 1 > a
    a.release
      1
    m.acquire 1 > b
    b.release
      1

[] > double-acquire
  mutex 2 > m
  seq > @
    m.acquire > a
      1
    m.acquire > b
      1
    a.release
      1
    b.release
      1

[] > acquire-with-locks
  mutex 100 > m
  seq > @
    m.acquire > a
      100
    a.release
      50
    a.release
      50

[] > lock-with-threads
  memory 1 > mem
  mutex 1 > mut
  [x] > multiple-by-x
    seq > @
      mut.acquire 1 > a
      mem.write
        mem.times x
      a.release 1
      TRUE
  thread > t1
    multiple-by-x 2
  thread > t2
    multiple-by-x 3
  seq > @
    t1.start
    t2.start
    t1.join
    t2.join
    eq.
      mem
      6

[] > overrelease
  mutex 1 > m
  assert-that > @
    try
      []
        seq > @
          m.acquire > a
            1
          a.release 2
      [e]
        e > @
      nop
    $.equal-to
      "Extra release"

[] > stress-test
  mutex 3 > m
  [] > lock-unlock
    seq > @
      m.acquire 1 > a
      a.release 1
      TRUE
  thread > t0
    lock-unlock
  t0' > t1
  t0' > t2
  t0' > t3
  t0' > t4
  t0' > t5
  t0' > t6
  t0' > t7
  t0' > t8
  t0' > t9
  t0' > t10

  seq > @
    t0.start
    t1.start
    t2.start
    t3.start
    t4.start
    t5.start
    t6.start
    t7.start
    t8.start
    t9.start
    t10.start
    t1.join
    t1.join
    t2.join
    t3.join
    t4.join
    t5.join
    t6.join
    t7.join
    t8.join
    t9.join
    t10.join

# @todo #12:90min Implement test of mutex
#  with 2 threads that acquires mutex,
#  sleep and then releas. So in fact
#  they must sleep in series, not parallely.
#  You can do it when sys-call will be released.
[] > test-with-time
  nop > @
